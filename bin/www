#!/usr/bin/env node

var app = require('../index');
var debug = require('debug')('flightfox:server');
var http = require('http');

// Get port from environment and store in Express.

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server.

var server = http.createServer(app);

// Listen on provided port, on all network interfaces.

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Socket connection.

var io = require('socket.io').listen(server);
require('../services/socket.js')(io);
app.io = io;

var dashboardIO = app.io
    .of('/sockets/dashboard')
    .on('connection', function (socket) {
        // @TODO hash event in order to implement private channels
        dashboardIO.emit('DASHBOARD_CHANGE_CLIENT_1', {type: 'MOTD', message:'welcome'});
        console.log("HEREEEEE");
    })
;
app.dashboardIO = dashboardIO;

// Normalize a port into a number, string, or false.

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

// Event listener for HTTP server "error" event.

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port
    ;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

// Event listener for HTTP server "listening" event.

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
    ;

    debug('Listening on ' + bind);
}
